# --- ACM Certificate for Server --- #
# This resource imports the dynamically generated server certificate into AWS Certificate Manager.
# The Client VPN endpoint will reference its ARN.
resource "aws_acm_certificate" "server" {
  private_key      = tls_private_key.server.private_key_pem  # The private key generated by the tls provider
  certificate_body = tls_locally_signed_cert.server.cert_pem # The certificate body generated by the tls provider

  lifecycle {
    # Ensures the new certificate is created before the old one is destroyed
    # to avoid dependency errors during updates.
    create_before_destroy = true
  }

  tags = merge(var.tags, {
    Name = "${var.name_prefix}-cvpn-server-cert-${var.environment}"
  })
}

# --- ACM Certificate for CA --- #
# This resource imports the dynamically generated Root CA certificate into AWS Certificate Manager.
# The Client VPN endpoint uses this to verify client certificates.
resource "aws_acm_certificate" "ca" {
  private_key      = tls_private_key.ca.private_key_pem # The private key for the CA, required for import
  certificate_body = tls_self_signed_cert.ca.cert_pem   # The CA certificate body from the tls provider

  lifecycle {
    create_before_destroy = true
  }

  tags = merge(var.tags, {
    Name = "${var.name_prefix}-cvpn-ca-cert-${var.environment}"
  })
}

# --- CloudWatch Log Group --- #
# This resource creates a log group to store connection logs from the Client VPN endpoint
# for monitoring, auditing, and troubleshooting purposes.
resource "aws_cloudwatch_log_group" "client_vpn_logs" {
  name              = "/aws/client-vpn/${var.name_prefix}-${var.environment}" # Log group name with a standard prefix
  retention_in_days = var.client_vpn_log_retention_days                       # Log retention period

  tags = merge(var.tags, {
    Name = "${var.name_prefix}-client-vpn-logs-${var.environment}"
  })
}

# --- CloudWatch Log Stream --- #
# This resource creates a log stream within the previously created log group.
resource "aws_cloudwatch_log_stream" "client_vpn_logs_stream" {
  name           = "connection-logs-stream"
  log_group_name = aws_cloudwatch_log_group.client_vpn_logs.name # Reference to the log group
}

# --- Client VPN Endpoint --- #
# This is the core resource of the module. It defines the Client VPN endpoint configuration,
# including authentication, networking, and logging settings.
resource "aws_ec2_client_vpn_endpoint" "endpoint" {
  description = "Client VPN endpoint for ${var.name_prefix}-${var.environment}"

  # Security group to control access to the Client VPN endpoint
  security_group_ids = [aws_security_group.client_vpn.id]

  # Network and IP configuration
  client_cidr_block = var.client_vpn_client_cidr_block # The address space for connecting clients

  # Authentication using our generated certificates
  server_certificate_arn = aws_acm_certificate.server.arn # ARN of the server certificate in ACM
  authentication_options {
    type                       = "certificate-authentication" # Use mutual certificate-based authentication
    root_certificate_chain_arn = aws_acm_certificate.ca.arn   # ARN of the Root CA certificate for client validation
  }

  # Connection logging configuration
  connection_log_options {
    enabled               = true
    cloudwatch_log_group  = aws_cloudwatch_log_group.client_vpn_logs.name         # Destination log group for connection data
    cloudwatch_log_stream = aws_cloudwatch_log_stream.client_vpn_logs_stream.name # Destination log stream for connection data
  }

  # Security and transport settings
  split_tunnel                  = var.client_vpn_split_tunnel # Defines if only specified traffic goes through the VPN
  transport_protocol            = "udp"                       # Recommended transport protocol for performance
  vpn_port                      = 443
  session_timeout_hours         = 24
  disconnect_on_session_timeout = false

  tags = merge(var.tags, {
    Name = "${var.name_prefix}-client-vpn-${var.environment}"
  })

  # Explicit dependency to ensure certificates are in ACM before creating the endpoint.
  depends_on = [
    aws_acm_certificate.server,
    aws_acm_certificate.ca,
  ]
}

# modules/client_vpn/main.tf

# --- Network Association --- #
# Associates the Client VPN endpoint with one or more subnets in the target VPC.
# This is required for the endpoint to pass traffic into the VPC.
resource "aws_ec2_client_vpn_network_association" "vpc" {
  # Create a map where keys are the indices of the list (0, 1, 2...)
  # and values are the subnet IDs themselves. The keys are known before apply.
  for_each = { for i, subnet_id in var.vpc_subnet_ids : i => subnet_id }

  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.endpoint.id
  subnet_id              = each.value # Use each.value to get the subnet ID
}

# --- Authorization Rule --- #
# Authorizes clients to access a specific network. Without this, no traffic is allowed.
# Here, we allow access to the entire VPC for all clients.
resource "aws_ec2_client_vpn_authorization_rule" "vpc_access" {
  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.endpoint.id
  target_network_cidr    = var.vpc_cidr
  authorize_all_groups   = true
  description            = "Allow all clients to access the VPC"
}

# --- Client Config Renderer --- #
# This data source uses the template file to generate a ready-to-use .ovpn configuration file
# by embedding the endpoint DNS name and the necessary client certificates and keys.
data "template_file" "config" {
  template = file("${path.module}/client_vpn_config.tpl")

  vars = {
    vpn_endpoint_dns_name = aws_ec2_client_vpn_endpoint.endpoint.dns_name
    ca_cert               = tls_self_signed_cert.ca.cert_pem
    client_cert           = tls_locally_signed_cert.client.cert_pem
    client_key            = tls_private_key.client.private_key_pem
  }
}

# --- Notes --- #
# 1. General Logic:
#    - This module is responsible for creating a fully functional Client VPN endpoint using certificate-based authentication.
#    - The required certificates (Root CA, Server, Client) are generated dynamically on-the-fly by the `tls` provider.
#
# 2. Authentication Method:
#    - The current configuration uses mutual certificate-based authentication. This method is straightforward
#      and suitable for development, testing, or small teams.
#    - For production environments or larger teams, it is highly recommended to switch to a more scalable
#      authentication method like SAML/SSO (federated-authentication) with an Identity Provider (e.g., Okta, Azure AD)
#      or Active Directory (directory-service-authentication). This can be done by modifying the `authentication_options` block.
#
# 3. Key Features:
#    - Certificate Management: The server and CA certificates are uploaded to ACM for use by the endpoint resource.
#      The client certificate is intentionally NOT uploaded; it's passed as an output to be used in the `.ovpn` configuration file.
#    - Connection Logging: All connection attempts are logged to a dedicated CloudWatch Log Group for diagnostics.
#    - Tagging Strategy: Each resource merges the incoming `var.tags` with its own unique `Name` tag.
#
# 4. Recommendations:
#    - Secure the Terraform state file, as it contains the generated private keys. Use an encrypted S3 backend.
#    - Adjust `client_vpn_log_retention_days` according to your organization's compliance and auditing policies.
