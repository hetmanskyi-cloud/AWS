---
- name: Install and Configure WordPress Stack
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    # Default path, can be overridden if needed
    wp_path: "/var/www/html"

  tasks:

    # --- 1. PRE-CHECKS AND DEPENDENCIES --- #

    - name: Wait for RDS MySQL to become available
      wait_for:
        host: "{{ wp_config.DB_HOST }}"
        port: "{{ wp_config.DB_PORT }}"
        timeout: 60
        delay: 5
        state: started
      tags: [db-wait]

    - name: Wait for Redis to become available
      wait_for:
        host: "{{ wp_config.REDIS_HOST }}"
        port: "{{ wp_config.REDIS_PORT }}"
        timeout: 60
        delay: 5
        state: started
      tags: [redis-wait]

    - name: Install all system and build packages
      apt:
        name:
          # Web stack
          - nginx
          - "php{{ wp_config.PHP_VERSION }}-fpm"
          - "php{{ wp_config.PHP_VERSION }}-mysql"
          - "php{{ wp_config.PHP_VERSION }}-redis"
          - "php{{ wp_config.PHP_VERSION }}-xml"
          - "php{{ wp_config.PHP_VERSION }}-mbstring"
          - "php{{ wp_config.PHP_VERSION }}-curl"
          - "php{{ wp_config.PHP_VERSION }}-zip"
          - "php{{ wp_config.PHP_VERSION }}-gd"
          - composer
          # Client tools
          - mysql-client
          - redis-tools
          - netcat-openbsd
          # Build dependencies for efs-utils
          - git
          - binutils
          - make
          - automake
          - autoconf
          - libtool
          - pkg-config
          - libssl-dev
          # Helper utilities
          - ca-certificates
          - gettext
          - python3-botocore
          - python3-boto3
          - jq
        state: present
        update_cache: yes
      register: apt_result
      until: apt_result is succeeded
      retries: 5
      delay: 10
      tags: [packages]

    # --- 2. RUST AND CARGO INSTALLATION --- #

    # Install Rust/Cargo using the official rustup installer.
    - name: Install Rust and Cargo via rustup
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        creates: "/root/.cargo/bin/rustc" # Skip if rust is already installed
      tags: [packages, rust]

    # Create a symbolic link for the cargo binary to a directory in the system's PATH.
    # This makes the 'cargo' command immediately available to all subsequent tasks in the playbook.
    - name: Create symlink for cargo to make it available in PATH
      file:
        src: /root/.cargo/bin/cargo
        dest: /usr/local/bin/cargo
        state: link
      tags: [packages, rust]

    # --- 3. EFS CLIENT INSTALLATION AND CONFIGURATION --- #

    - name: Clone efs-utils repository from GitHub
      git:
        repo: https://github.com/aws/efs-utils
        dest: /tmp/efs-utils
        version: master # Use the latest stable code from the master branch
      tags: [efs, install]

    - name: Build efs-utils .deb package
      command: ./build-deb.sh
      args:
        chdir: /tmp/efs-utils
        creates: /tmp/efs-utils/build/amazon-efs-utils.deb # Skip if already built
      environment:
        PIP_BREAK_SYSTEM_PACKAGES: "1"
      tags: [efs, install]

    - name: Find the exact name of the built .deb package
      find:
        paths: /tmp/efs-utils/build
        patterns: "amazon-efs-utils*deb"
      register: efs_deb_file
      tags: [efs, install]

    - name: Install amazon-efs-utils from built package
      apt:
        deb: "{{ efs_deb_file.files[0].path }}"
      when: efs_deb_file.matched > 0
      tags: [efs, install]

    - name: Clean up efs-utils build directory
      file:
        path: /tmp/efs-utils
        state: absent
      tags: [efs, cleanup]

    - name: Ensure EFS mount point exists
      file:
        path: "{{ wp_path }}/wp-content/uploads"
        state: directory
        owner: www-data
        group: www-data
        mode: '0775'
      tags: [efs, config]

    - name: Configure EFS mount in /etc/fstab
      mount:
        path: "{{ wp_path }}/wp-content/uploads"
        src: "{{ efs_file_system_id }}:/"
        fstype: efs
        opts: "_netdev,tls,accesspoint={{ efs_access_point_id }}"
        state: present
      tags: [efs, config]

    # --- 4. CLOUDWATCH AGENT CONFIGURATION --- #

    - name: Install CloudWatch Agent
      apt:
        deb: https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
      when: enable_cloudwatch_logs | bool
      tags: [monitoring, cloudwatch]

    - name: Create CloudWatch Agent configuration file
      copy:
        dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        content: |
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/user-data.log",
                      "log_group_name": "{{ cloudwatch_log_groups.user_data }}",
                      "log_stream_name": "{instance_id}-userdata"
                    },
                    {
                      "file_path": "/var/log/ansible_playbook.log",
                      "log_group_name": "{{ cloudwatch_log_groups.user_data }}",
                      "log_stream_name": "{instance_id}-ansible"
                    },
                    {
                      "file_path": "/var/log/syslog",
                      "log_group_name": "{{ cloudwatch_log_groups.system }}",
                      "log_stream_name": "{instance_id}"
                    },
                    {
                      "file_path": "/var/log/nginx/access.log",
                      "log_group_name": "{{ cloudwatch_log_groups.nginx }}",
                      "log_stream_name": "{instance_id}-access"
                    },
                    {
                      "file_path": "/var/log/nginx/error.log",
                      "log_group_name": "{{ cloudwatch_log_groups.nginx }}",
                      "log_stream_name": "{instance_id}-error"
                    },
                    {
                      "file_path": "/var/log/php{{ wp_config.PHP_VERSION }}-fpm.log",
                      "log_group_name": "{{ cloudwatch_log_groups.php_fpm }}",
                      "log_stream_name": "{instance_id}"
                    },
                    {
                      "file_path": "/var/log/wordpress.log",
                      "log_group_name": "{{ cloudwatch_log_groups.wordpress }}",
                      "log_stream_name": "{instance_id}"
                    }
                  ]
                }
              }
            }
          }
        mode: '0644'
      when: enable_cloudwatch_logs | bool
      notify: Restart CloudWatch Agent
      tags: [monitoring, cloudwatch]

    - name: Start and enable the CloudWatch Agent service
      service:
        name: amazon-cloudwatch-agent
        state: started
        enabled: yes
      when: enable_cloudwatch_logs | bool
      tags: [monitoring, cloudwatch]

    # --- 5. PHP AND REDIS CONFIGURATION --- #

    - name: Download Amazon RDS global SSL certificate bundle
      get_url:
        url: https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem
        dest: /etc/ssl/certs/rds-combined-ca-bundle.pem
        mode: '0644'
      tags: [php, config, ssl]

    - name: Update system CA certificates
      command: update-ca-certificates --fresh
      changed_when: false
      tags: [php, config, ssl]

    - name: Configure PHP FPM and CLI to use system CA bundle for SSL
      lineinfile:
        path: "{{ item }}"
        regexp: '^;openssl.cafile='
        line: 'openssl.cafile=/etc/ssl/certs/ca-certificates.crt'
      loop:
        - "/etc/php/{{ wp_config.PHP_VERSION }}/fpm/php.ini"
        - "/etc/php/{{ wp_config.PHP_VERSION }}/cli/php.ini"
      notify: Restart PHP-FPM
      tags: [php, config, ssl]

    - name: Set secure permissions for PHP session directory
      file:
        path: "/var/lib/php/sessions"
        owner: root
        group: www-data
        mode: '1733'
      tags: [php, config, security]

    - name: Configure PHP to use Redis for session handling over TLS
      copy:
        dest: "/etc/php/{{ wp_config.PHP_VERSION }}/fpm/conf.d/99-redis-session.ini"
        content: |
          session.save_handler = redis
          session.save_path = "tls://{{ wp_config.REDIS_HOST }}:{{ wp_config.REDIS_PORT }}?auth={{ redis_auth_token }}&ssl[verify_peer]=0"
          session.cookie_httponly = 1
          session.cookie_secure = 1
        mode: '0644'
      notify: Restart PHP-FPM
      tags: [php, config, redis]

    # --- 6. NGINX CONFIGURATION --- #

    - name: Create Nginx virtual host configuration from template
      template:
        src: ../templates/wordpress.conf.j2
        dest: /etc/nginx/sites-available/wordpress
        mode: '0644'
      vars:
        php_fpm_socket: "/run/php/php{{ wp_config.PHP_VERSION }}-fpm.sock"
      notify: Restart Nginx
      tags: [nginx, config]

    - name: Enable WordPress site
      file:
        src: /etc/nginx/sites-available/wordpress
        dest: /etc/nginx/sites-enabled/wordpress
        state: link
      notify: Restart Nginx
      tags: [nginx, config]

    - name: Disable default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Restart Nginx
      tags: [nginx, config]

    - name: Optimize Nginx worker processes and connections
      lineinfile:
        path: /etc/nginx/nginx.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^worker_processes', line: 'worker_processes auto;' }
        - { regexp: '^\s*worker_connections\s\w+;', line: '    worker_connections 1024;' }
      notify: Restart Nginx
      tags: [nginx, config, optimization]

    # --- 7. WORDPRESS CORE AND WP-CLI INSTALLATION --- #

    - name: Clone WordPress from Git repository
      git:
        repo: "https://github.com/hetmanskyi-cloud/wordpress.git"
        dest: "/tmp/wordpress-clone"
        version: "{{ wp_version | default('master') }}"
        depth: 1
        force: yes
      tags: [wordpress, install]

    - name: Synchronize WordPress files to the web root
      synchronize:
        src: "/tmp/wordpress-clone/"
        dest: "{{ wp_path }}/"
        rsync_opts:
          - "--delete"
          - "--exclude=wp-content/uploads"
      tags: [wordpress, install]

    - name: Remove temporary WordPress clone directory
      file:
        path: "/tmp/wordpress-clone"
        state: absent
      tags: [wordpress, install]

    - name: Set correct ownership and permissions for WordPress files
      file:
        path: "{{ wp_path }}"
        state: directory
        owner: "www-data"
        group: "www-data"
        recurse: yes
      tags: [wordpress, permissions]

    - name: Ensure wp-content directory is writable by www-data
      file:
        path: "{{ wp_path }}/wp-content"
        state: directory
        owner: "www-data"
        group: "www-data"
        mode: '0755'
      tags: [wordpress, permissions]

    - name: Install Predis library via Composer
      composer:
        command: require
        arguments: predis/predis
        working_dir: "{{ wp_path }}"
      become_user: www-data
      tags: [wordpress, composer]

    - name: Create WP-CLI cache directory for www-data user
      file:
        path: "/tmp/.wp-cli/cache"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'
      tags: [wordpress, wp-cli]

    - name: Download WP-CLI (WordPress Command Line Interface)
      get_url:
        url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
        dest: /usr/local/bin/wp
        mode: '0755'
      tags: [wordpress, wp-cli]

    # --- 8. WORDPRESS CONFIGURATION AND INSTALLATION --- #

    - name: Verify DB connection with SSL via mysql client
      command: >-
        mysql -h "{{ wp_config.DB_HOST }}" -u "{{ db_user }}" -p"{{ db_password }}"
        --ssl-ca="/etc/ssl/certs/rds-combined-ca-bundle.pem"
        -e "USE {{ db_name }};"
      changed_when: false
      no_log: true
      tags: [wordpress, db-check]

    - name: Verify DB connection with SSL via PHP mysqli
      shell: |
        php -r "
        \$mysqli = mysqli_init();
        \$mysqli->ssl_set(null, null, '/etc/ssl/certs/rds-combined-ca-bundle.pem', null, null);
        \$mysqli->real_connect('{{ wp_config.DB_HOST }}', '{{ db_user }}', '{{ db_password }}', '{{ db_name }}', {{ wp_config.DB_PORT }}, null, MYSQLI_CLIENT_SSL);
        if (\$mysqli->connect_errno) { exit(1); }"
      changed_when: false
      no_log: true
      tags: [wordpress, db-check, ssl]

    - name: Create wp-config.php
      command: >-
        wp config create --path="{{ wp_path }}" --dbname="{{ db_name }}" --dbuser="{{ db_user }}"
        --dbpass="{{ db_password }}" --dbhost="{{ wp_config.DB_HOST }}" --dbprefix="wp_" --skip-check --force
      become_user: www-data
      args:
        creates: "{{ wp_path }}/wp-config.php"
      no_log: true
      tags: [wordpress, config, wp-cli]

    - name: Configure salts, Redis, URLs, and other settings in wp-config.php
      command: "wp config set {{ item.key }} '{{ item.value }}' --path={{ wp_path }} {{ item.raw | default('') }}"
      loop:
        - { key: 'AUTH_KEY', value: "{{ auth_key }}" }
        - { key: 'SECURE_AUTH_KEY', value: "{{ secure_auth_key }}" }
        - { key: 'LOGGED_IN_KEY', value: "{{ logged_in_key }}" }
        - { key: 'NONCE_KEY', value: "{{ nonce_key }}" }
        - { key: 'AUTH_SALT', value: "{{ auth_salt }}" }
        - { key: 'SECURE_AUTH_SALT', value: "{{ secure_auth_salt }}" }
        - { key: 'LOGGED_IN_SALT', value: "{{ logged_in_salt }}" }
        - { key: 'NONCE_SALT', value: "{{ nonce_salt }}" }
        - { key: 'WP_REDIS_HOST', value: "{{ wp_config.REDIS_HOST }}" }
        - { key: 'WP_REDIS_PORT', value: "{{ wp_config.REDIS_PORT }}" }
        - { key: 'WP_REDIS_PASSWORD', value: "{{ redis_auth_token }}" }
        - { key: 'WP_REDIS_CLIENT', value: 'predis' }
        - { key: 'WP_REDIS_SCHEME', value: 'tls' }
        - { key: 'WP_CACHE', value: 'true', raw: '--raw' }
        - { key: 'WP_SITEURL', value: "{{ site_url }}" }
        - { key: 'WP_HOME', value: "{{ site_url }}" }
        - { key: 'MYSQL_CLIENT_FLAGS', value: 'MYSQLI_CLIENT_SSL', raw: '--raw' }
        - { key: 'MYSQL_SSL_CA', value: '/etc/ssl/certs/rds-combined-ca-bundle.pem' }
        - { key: 'WP_DEBUG', value: 'true', raw: '--raw' }
        - { key: 'WP_DEBUG_LOG', value: '/var/log/wordpress.log' }
        - { key: 'WP_DEBUG_DISPLAY', value: 'false', raw: '--raw' }
      become_user: www-data
      no_log: true
      tags: [wordpress, config, wp-cli]

    - name: Conditionally force SSL for admin area
      command: "wp config set FORCE_SSL_ADMIN true --raw --path={{ wp_path }}"
      become_user: www-data
      when: enable_https | bool
      tags: [wordpress, config, ssl]

    - name: Add reverse proxy HTTPS snippet to wp-config.php
      blockinfile:
        path: "{{ wp_path }}/wp-config.php"
        marker: "# BEGIN ANSIBLE MANAGED BLOCK: Reverse Proxy Support"
        insertbefore: "/* That's all, stop editing! Happy publishing. */"
        block: |
          if (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') {
              $_SERVER['HTTPS'] = 'on';
          }
      become_user: www-data
      tags: [wordpress, config, ssl]

    - name: Check if WordPress is already installed
      command: "wp core is-installed --path={{ wp_path }}"
      become_user: www-data
      register: wordpress_install_status
      changed_when: false
      failed_when: false
      tags: [wordpress, install, wp-cli]

    - name: Install WordPress core
      command: >-
        wp core install --path="{{ wp_path }}" --url="{{ site_url }}" --title="{{ wp_config.WP_TITLE }}"
        --admin_user="{{ wp_admin_user }}" --admin_password="{{ wp_admin_password }}"
        --admin_email="{{ wp_admin_email }}" --skip-email
      when: wordpress_install_status.rc != 0
      become_user: www-data
      no_log: true
      tags: [wordpress, install, wp-cli]

    - name: Activate included plugins
      command: "wp plugin activate {{ item }} --path={{ wp_path }}"
      loop: [ 'redis-cache', 'wordfence' ]
      become_user: www-data
      tags: [wordpress, plugins, wp-cli]

    - name: Enable Redis Object Cache
      command: "wp redis enable --path={{ wp_path }}"
      become_user: www-data
      tags: [wordpress, plugins, redis]

    - name: Write secrets to /etc/environment for healthcheck script
      lineinfile:
        path: /etc/environment
        line: "{{ item }}"
        create: yes
      loop:
        - 'DB_NAME="{{ db_name }}"'
        - 'DB_USER="{{ db_user }}"'
        - 'DB_PASSWORD="{{ db_password }}"'
        - 'REDIS_AUTH_TOKEN="{{ redis_auth_token }}"'
      no_log: true
      tags: [wordpress, config]

    # --- 9. POST-INSTALL HEALTHCHECK AND LOGS --- #

    - name: Create WordPress debug log file
      file:
        path: /var/log/wordpress.log
        state: touch
        owner: www-data
        group: www-data
        mode: '0644'
      tags: [wordpress, debug]

    - name: Check if healthcheck file already exists
      stat:
        path: "{{ wp_path }}/healthcheck.php"
      register: healthcheck_file_stat
      tags: [wordpress, healthcheck]

    - name: Download healthcheck.php from S3
      aws_s3:
        bucket: "{{ scripts_bucket_name }}"
        object: "wordpress/healthcheck.php"
        dest: "{{ wp_path }}/healthcheck.php"
        mode: get
      when: not healthcheck_file_stat.stat.exists
      tags: [wordpress, healthcheck]

    - name: Set permissions for healthcheck.php
      file:
        path: "{{ wp_path }}/healthcheck.php"
        owner: www-data
        group: www-data
        mode: '0644'
      tags: [wordpress, healthcheck]

    # --- 10. SYSTEM CLEANUP --- #

    - name: Clean up APT package cache
      apt:
        autoclean: yes
        autoremove: yes
      tags: [cleanup]

    - name: Remove sensitive secrets from /etc/environment after setup
      lineinfile:
        path: /etc/environment
        regexp: '^{{ item }}='
        state: absent
      loop:
        - DB_PASSWORD
        - REDIS_AUTH_TOKEN
      tags: [cleanup, security]

  # --- SERVICE HANDLERS --- #

  handlers:
    - name: Restart PHP-FPM
      listen: Restart PHP-FPM
      service:
        name: "php{{ wp_config.PHP_VERSION }}-fpm"
        state: restarted

    - name: Restart Nginx
      listen: Restart Nginx
      service:
        name: nginx
        state: restarted

    - name: Restart CloudWatch Agent
      listen: Restart CloudWatch Agent
      service:
        name: amazon-cloudwatch-agent
        state: restarted
